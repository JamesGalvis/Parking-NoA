// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SuperAdmin
  Admin
  Empleado
}

enum FeeCategory {
  HOURLY
  MONTHLY
}

enum ClientCategory {
  HOURLY
  MONTHLY
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  phone         String?
  image         String?
  role          UserRole  @default(Empleado)

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Client {
  id             String   @id @default(cuid())
  name           String? // Nombre, solo necesario para clientes mensuales
  document       String? // Documento, solo relevante y único para clientes mensuales
  phone          String? // Teléfono, solo para clientes mensuales
  plate          String // Matrícula del vehículo
  email          String?
  monthsReserved Int? // Solo para los usuarios mensuales
  reminderSent   Boolean? @default(false)

  clientTypeId String
  clientType   ClientType @relation(fields: [clientTypeId], references: [id])

  vehicleTypeId String
  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id])

  clientCategory ClientCategory // Enum para definir si es por hora o mensual

  totalPaid Float   @default(0.0)
  isActive  Boolean @default(true)

  // Campos específicos para clientes por hora
  entryDate DateTime? // Fecha de entrada, solo para clientes por hora
  exitDate  DateTime? // Fecha de salida, solo para clientes por hora

  // Campos específicos para clientes mensuales
  startDate DateTime? @default(now()) // Fecha de inicio, solo para clientes mensuales
  endDate   DateTime? // Fecha de finalización, solo para clientes mensuales

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClientType {
  id   String @id @default(cuid())
  name String // Ejemplo: "Estudiante", "Particular"

  clients Client[] // Relación con clientes
  fees    Fee[] // Relación con tarifas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VehicleType {
  id   String @id @default(cuid())
  name String // Ejemplo: "Automóvil", "Motocicleta", "Camioneta"

  clients Client[] // Relación con clientes
  fees    Fee[] // Relación con tarifas

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Fee {
  id String @id @default(cuid())

  clientType   ClientType @relation(fields: [clientTypeId], references: [id], onDelete: Cascade)
  clientTypeId String

  vehicleType   VehicleType @relation(fields: [vehicleTypeId], references: [id], onDelete: Cascade)
  vehicleTypeId String

  feeType FeeCategory // Enum para definir si es tarifa por hora o mensual
  price   Float // Precio de la tarifa

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
